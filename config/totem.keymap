//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define DIG  2
#define SYS  3
#define QUICK_TAP_MS 175

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

// proper urob's home row, uncomment it if you are not going to use visual editor
//#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
//    ZMK_HOLD_TAP(NAME, \
//        flavor = "balanced"; \
//        tapping-term-ms = <280>; \
//        quick-tap-ms = <QUICK_TAP_MS>; \
//        require-prior-idle-ms = <150>; \
//        bindings = <HOLD>, <TAP>; \
//        hold-trigger-key-positions = <TRIGGER_POS>; \
//        hold-trigger-on-release; \
//    )
//
//MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
//MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
//MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        leftbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <24 27>;
            timeout-ms = <30>;
        };

        rightbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <23 28>;
            timeout-ms = <30>;
        };

        leftparenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 16>;
            timeout-ms = <30>;
        };

        rightparenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <12 17>;
            timeout-ms = <30>;
        };

        leftcurly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 6>;
            timeout-ms = <30>;
        };

        rightcurly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <2 7>;
            timeout-ms = <30>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        mousewarp {
            bindings = <&kp LA(LG(Z))>;
            key-positions = <34 35>;
            timeout-ms = <30>;
        };

        lefttab {
            bindings = <&kp LC(PAGE_UP)>;
            key-positions = <12 11>;
            timeout-ms = <30>;
        };

        righttab {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <17 18>;
            timeout-ms = <30>;
        };

        movetableft {
            bindings = <&kp LC(LS(PAGE_UP))>;
            key-positions = <22 23>;
            timeout-ms = <30>;
        };

        movetabright {
            bindings = <&kp LC(LS(PAGE_DOWN))>;
            key-positions = <28 29>;
            timeout-ms = <30>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    behaviors {
        // this is homerow mod that works identical to urob's one, but this one allows visual editor to understand

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            label = "BASE";
            bindings = <
           &kp Q  &kp W  &kp E            &kp R                  &kp T                      &kp Y                    &kp U                        &kp I            &kp O    &kp P
           &kp A  &kp S  &hml LEFT_GUI D  &hml LEFT_SHIFT F      &hml LEFT_ALT G            &hmr LEFT_ALT H          &hmr LEFT_SHIFT J            &hmr LEFT_GUI K  &kp L    &kp SEMICOLON
&lt 3 TAB  &kp Z  &kp X  &kp C            &hml LEFT_CONTROL V    &hml LS(LEFT_CONTROL) B    &hmr LS(LEFT_CONTROL) N  &hmr LEFT_CONTROL M          &kp COMMA        &kp DOT  &comment_or 0 SLASH  &lt 3 SQT
                         &kp GRAVE        &hml LC(LEFT_WIN) ESC  &lt 1 SPACE                &lt 2 ENTER              &hmr LC(LEFT_GUI) BACKSPACE  &kp BACKSLASH
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
       &none  &none  &none         &none      &none            &kp HOME        &kp LC(LEFT)    &kp LC(RIGHT)  &kp END          &none
       &none  &none  &kp LEFT_GUI  &kp LSHFT  &kp LEFT_ALT     &kp LEFT        &kp DOWN        &kp UP_ARROW   &kp RIGHT        &msc SCRL_UP
&none  &none  &none  &none         &kp LCTRL  &kp LS(LCTRL)    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP   &mmv MOVE_RIGHT  &msc SCRL_DOWN  &kp CAPSLOCK
                     &none         &trans     &trans           &mkp LCLK       &mkp RCLK       &none
            >;
        };

        digits {
            label = "Digits";
            bindings = <
            &kp C_PREVIOUS    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp C_VOLUME_UP                       &none                 &none           &none         &none  &none
            &kp C_NEXT        &kp NUMBER_4  &kp N5        &kp NUMBER_6  &press_two_keys MINUS GREATER_THAN    &kp LEFT_ALT          &kp LEFT_SHIFT  &kp LEFT_GUI  &none  &none
&kp C_MUTE  &kp C_PLAY_PAUSE  &kp N7        &kp N8        &kp N9        &kp C_VOLUME_DOWN                     &kp LS(LEFT_CONTROL)  &kp LCTRL       &none         &none  &none  &none
                                            &trans        &trans        &trans                                &trans                &trans          &trans
            >;
        };

        sim_layer {
            label = "SYSTEM";
            bindings = <
       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none        &none  &none  &none  &none
       &none         &none         &none         &bt BT_CLR    &bt BT_CLR_ALL    &none        &none  &none  &none  &none
&none  &none         &none         &none         &none         &bootloader       &bootloader  &none  &none  &none  &none  &none
                                   &none         &none         &none             &none        &none  &none
            >;
        };
    };
};
